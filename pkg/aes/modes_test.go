package aes

import (
	"bytes"
	"strconv"
	"testing"
)

var modeECBTests = []struct {
	key []byte
	in  []byte
	out []byte
}{
	{
		[]byte{
			0xc4, 0xc9, 0x92, 0xa1, 0x11, 0x51, 0xff, 0xc8, 0xe2, 0xc0, 0x5c, 0x95, 0x4b, 0x7e, 0x22, 0xaf,
		},
		[]byte{
			0xda, 0x08, 0x28, 0xd9, 0x57, 0xa5, 0xb8, 0x39, 0xcb, 0xc5, 0x99, 0xed, 0x2e, 0x8b, 0x5d, 0xf2,
		},
		[]byte{
			0x86, 0xb7, 0x52, 0x67, 0x0e, 0x7f, 0x67, 0x6e, 0xc6, 0x80, 0x76, 0x38, 0x09, 0xab, 0x04, 0xeb,
			0x6f, 0xd9, 0xf7, 0xf3, 0x0d, 0xd5, 0x6a, 0xce, 0xbe, 0xbf, 0x1d, 0xdb, 0xdd, 0xab, 0xd3, 0x23,
		},
	},
	{
		[]byte{
			0x4a, 0xbf, 0x8a, 0x6d, 0x75, 0x3a, 0x93, 0x01, 0x39, 0x2f, 0x66, 0xd9, 0xfe, 0xc1, 0x81, 0xaf,
		},
		[]byte{
			0x6b, 0xc5, 0x46, 0x88, 0x61, 0x73, 0xdb, 0x78, 0xba, 0x4e, 0xe3, 0xfd, 0xa5, 0x7e, 0x51, 0xad,
			0xdb, 0x5c, 0x3c, 0xb6, 0x2a, 0xdd, 0x2a, 0x4c, 0xba, 0xc6, 0x1a, 0xa1, 0x3b, 0xfa, 0xed, 0x86,
		},
		[]byte{
			0xeb, 0x87, 0x43, 0x5d, 0x7a, 0x29, 0xed, 0x5d, 0x32, 0x3c, 0xcd, 0x72, 0xd5, 0x36, 0xff, 0x12,
			0xa0, 0x84, 0xe8, 0x92, 0xbf, 0x5e, 0x06, 0xed, 0x75, 0x07, 0x80, 0xeb, 0xf9, 0x07, 0xfd, 0x4d,
			0xd6, 0x2a, 0x98, 0x3e, 0x31, 0x6d, 0xb2, 0x49, 0xcb, 0x0e, 0x8e, 0x87, 0x48, 0x3a, 0x09, 0xf6,
		},
	},
	{
		[]byte{
			0x12, 0x2b, 0xae, 0x69, 0x39, 0xce, 0xfe, 0x30, 0x52, 0x5f, 0xe7, 0xb0, 0x5a, 0xec, 0xde, 0x0d,
		},
		[]byte{
			0xcb, 0x61, 0xc8, 0xe6, 0x04, 0x63, 0x8d, 0xbf, 0x9f, 0xfa, 0x35, 0xa9, 0x78, 0x2b, 0x69, 0x2d,
			0xc2, 0x45, 0xfc, 0xd0, 0xad, 0x1d, 0xbc, 0x85, 0xa1, 0x57, 0x0c, 0xcd, 0x55, 0x72, 0x67, 0xc0,
			0xeb, 0x72, 0xa5, 0xbe, 0xa6, 0x1d, 0x78, 0x5f, 0x55, 0xbb, 0xff, 0x20, 0x1e, 0x51, 0x24, 0xba,
		},
		[]byte{
			0x1b, 0x7b, 0x77, 0x6d, 0xa5, 0x9c, 0x83, 0x0e, 0xf2, 0x51, 0x36, 0x17, 0x9e, 0xdb, 0x47, 0xeb,
			0x54, 0x59, 0xd6, 0xe7, 0x30, 0x1f, 0xe6, 0xa5, 0x7b, 0xdc, 0xf9, 0x51, 0xdc, 0x05, 0xd1, 0xe7,
			0xad, 0xe6, 0x4c, 0x50, 0x78, 0x81, 0xbf, 0x9e, 0x8f, 0xdc, 0x77, 0xe6, 0xbd, 0xb4, 0xe1, 0x23,
			0xbd, 0xed, 0x3c, 0x3f, 0x68, 0x35, 0xb2, 0x54, 0x24, 0xa8, 0x65, 0xf4, 0x88, 0x54, 0x0c, 0x60,
		},
	},
	{
		[]byte{
			0x28, 0x86, 0x21, 0x0c, 0x76, 0xae, 0x57, 0xe0, 0xc5, 0xf8, 0x35, 0xd7, 0xe8, 0x4e, 0xa3, 0xfa,
			0x83, 0x90, 0xce, 0xb0, 0xda, 0x5f, 0xb8, 0x69,
		},
		[]byte{
			0xd1, 0xd4, 0x64, 0x20, 0xe9, 0x80, 0x32, 0x7e, 0x72, 0xe4, 0x79, 0xdd, 0x1a, 0x2d, 0x03, 0xcf,
		},
		[]byte{
			0x94, 0xeb, 0xb9, 0xb4, 0x91, 0x5b, 0xda, 0x49, 0x19, 0x2c, 0x70, 0x2e, 0xae, 0xde, 0x25, 0xf8,
			0xc9, 0xe1, 0xad, 0x07, 0x74, 0x3e, 0x85, 0x8b, 0xa7, 0xbd, 0x52, 0x72, 0x6e, 0x9e, 0xb5, 0xe7,
		},
	},
	{
		[]byte{
			0x82, 0x77, 0x79, 0xd6, 0x43, 0xdd, 0xb3, 0xb1, 0x15, 0x90, 0x36, 0xa1, 0x16, 0x8f, 0xf2, 0x66,
			0xb7, 0xf6, 0x32, 0x54, 0x11, 0x93, 0xa8, 0x85,
		},
		[]byte{
			0x55, 0xa6, 0x4a, 0x8d, 0x11, 0x94, 0xf1, 0xf4, 0xd4, 0xd0, 0x89, 0x46, 0x2f, 0x14, 0x93, 0xbe,
			0x54, 0x7b, 0x98, 0x31, 0xec, 0xbe, 0x5c, 0x78, 0x0e, 0x27, 0x46, 0xa0, 0x4b, 0xbd, 0x6d, 0xf1,
		},
		[]byte{
			0x1e, 0x3f, 0x5f, 0x72, 0x33, 0x3a, 0x97, 0xed, 0xca, 0x20, 0x10, 0xfd, 0x21, 0x07, 0x5a, 0x95,
			0x3f, 0xba, 0x42, 0xc6, 0xe1, 0xae, 0xbc, 0xb4, 0x7c, 0x21, 0xaa, 0x5e, 0xc8, 0xde, 0xad, 0xb1,
			0x37, 0x46, 0xfb, 0xd6, 0xd1, 0xc2, 0x8d, 0x33, 0x91, 0xcf, 0x0e, 0x3b, 0xaf, 0x1c, 0xdf, 0x24,
		},
	},
	{
		[]byte{
			0x4d, 0xc1, 0x3c, 0x7a, 0xc0, 0xe2, 0x30, 0xc9, 0x60, 0xf6, 0xfb, 0x11, 0x8d, 0x2b, 0x2b, 0x80,
			0xb7, 0x94, 0x90, 0xdc, 0x2e, 0x88, 0x1a, 0xaf,
		},
		[]byte{
			0xa2, 0x60, 0xb0, 0x92, 0x59, 0x4d, 0x74, 0x13, 0x03, 0x7e, 0x41, 0xd8, 0xfc, 0x82, 0xb2, 0x39,
			0xcc, 0xfd, 0x03, 0x07, 0xee, 0x6d, 0x06, 0x55, 0x6e, 0xfe, 0x9c, 0xbb, 0x0d, 0xd7, 0xe0, 0x6e,
			0xd9, 0x8f, 0x18, 0x63, 0xad, 0x07, 0x0b, 0x44, 0x53, 0x4c, 0xb7, 0x8e, 0x56, 0xf8, 0x8f, 0x6f,
		},
		[]byte{
			0xe4, 0x1c, 0xa4, 0x03, 0xa2, 0xa1, 0x20, 0x0e, 0x35, 0x16, 0x35, 0x49, 0xdd, 0x71, 0x3d, 0x9a,
			0xe9, 0x05, 0xf3, 0x94, 0x76, 0xc9, 0xdb, 0x3c, 0x59, 0x98, 0xd7, 0x3b, 0xe2, 0xf6, 0x26, 0xcd,
			0xdf, 0x57, 0xf8, 0x3f, 0xdc, 0xe3, 0xe5, 0x54, 0xca, 0x2e, 0xf7, 0x27, 0x81, 0xf4, 0x88, 0xa4,
			0x66, 0xbb, 0xcb, 0x19, 0x95, 0x72, 0xbb, 0x82, 0xba, 0xe6, 0x14, 0xd9, 0x3c, 0xb7, 0x23, 0x58,
		},
	},
	{
		[]byte{
			0x80, 0x71, 0xf4, 0x15, 0x54, 0x41, 0x49, 0x40, 0x10, 0x0e, 0x14, 0x85, 0xe0, 0x3e, 0x70, 0x43,
			0x27, 0xb7, 0xce, 0xa6, 0x69, 0xe8, 0xda, 0xa1, 0x2b, 0x18, 0x0d, 0x0b, 0x9d, 0x5e, 0x13, 0x04,
		},
		[]byte{
			0x48, 0xac, 0x78, 0x9d, 0x36, 0x26, 0x5d, 0x9c, 0x33, 0x10, 0x03, 0x9c, 0xa9, 0x93, 0xaf, 0x46,
		},
		[]byte{
			0xc8, 0x40, 0xe9, 0xd3, 0xce, 0x63, 0x59, 0xd6, 0xc1, 0x67, 0x8a, 0x52, 0x4e, 0xcf, 0xef, 0x0a,
			0x87, 0x26, 0xc4, 0x75, 0xa5, 0x6c, 0xa9, 0xaa, 0xef, 0x19, 0x1a, 0x9e, 0xbf, 0xd6, 0x8f, 0xe0,
		},
	},
	{
		[]byte{
			0xaa, 0xe4, 0x84, 0x4b, 0xad, 0x64, 0x6e, 0x3e, 0xc5, 0x83, 0x97, 0x7f, 0xc8, 0xf9, 0x9c, 0x37,
			0x01, 0xa9, 0x71, 0x50, 0xd4, 0x88, 0xbc, 0x19, 0x93, 0x1b, 0xfa, 0x64, 0xe7, 0x6a, 0x7d, 0x8d,
		},
		[]byte{
			0x75, 0x8a, 0xc4, 0x6a, 0x27, 0xb7, 0x8f, 0x9e, 0x65, 0x10, 0xd2, 0x8e, 0x15, 0x58, 0x0b, 0x55,
			0x45, 0x69, 0xfa, 0x4d, 0x59, 0x6c, 0xe6, 0x7a, 0xf7, 0x32, 0x79, 0xaf, 0x54, 0x16, 0xe6, 0x70,
		},
		[]byte{
			0x9d, 0xee, 0xd7, 0x1a, 0xad, 0x3b, 0x3b, 0x03, 0x49, 0xa6, 0x59, 0xdc, 0x92, 0x15, 0x1b, 0x25,
			0x70, 0x8a, 0xf5, 0x2e, 0x02, 0xd6, 0xed, 0xe1, 0x39, 0xa3, 0x00, 0xf5, 0x1b, 0xda, 0x16, 0x78,
			0x16, 0x3f, 0xfd, 0x58, 0x5e, 0x98, 0x9e, 0x78, 0xb6, 0x08, 0x6b, 0x61, 0x58, 0xe7, 0xa5, 0x8b,
		},
	},
	{
		[]byte{
			0x42, 0x6e, 0x55, 0xb6, 0x1f, 0xba, 0xaf, 0xc9, 0x7b, 0x21, 0x11, 0xa0, 0x1a, 0xea, 0x25, 0xd3,
			0xdc, 0x4f, 0x90, 0x16, 0xed, 0x89, 0xbe, 0x54, 0xae, 0xe7, 0xb3, 0x0c, 0x9e, 0x19, 0x77, 0x4c,
		},
		[]byte{
			0xcd, 0x2c, 0x4a, 0x98, 0x96, 0x25, 0x1b, 0xe3, 0x63, 0xd9, 0x17, 0x2e, 0x2b, 0xb6, 0x81, 0x77,
			0xa4, 0xa2, 0x62, 0x0a, 0xc6, 0x5e, 0x49, 0xbf, 0x46, 0xf1, 0x25, 0x37, 0x78, 0x40, 0x47, 0x99,
			0x32, 0xa2, 0x47, 0x54, 0x8f, 0x24, 0xab, 0x98, 0x45, 0x4a, 0x19, 0xcc, 0xe1, 0xa8, 0x8b, 0x02,
		},
		[]byte{
			0xba, 0xab, 0x2a, 0xa4, 0xa8, 0x89, 0x0a, 0x57, 0xaa, 0xfc, 0x40, 0x43, 0xd5, 0x90, 0xb3, 0x4f,
			0x91, 0xa9, 0xf7, 0xdc, 0x94, 0x24, 0xbf, 0xe4, 0x16, 0xf4, 0xd2, 0x3c, 0x0d, 0x4c, 0x30, 0x34,
			0xec, 0x9c, 0x80, 0xcb, 0xc3, 0xda, 0x5d, 0x1b, 0x11, 0xc9, 0x82, 0x97, 0x1f, 0x6c, 0x9c, 0x6e,
			0xad, 0x07, 0xda, 0x8e, 0xa9, 0xca, 0x29, 0xbc, 0x66, 0xfc, 0xb8, 0xeb, 0xc8, 0x6e, 0x20, 0x15,
		},
	},
}

var modeCBCTests = []struct {
	key []byte
	iv  []byte
	in  []byte
	out []byte
}{
	{
		[]byte{
			0x2f, 0xe0, 0x78, 0x59, 0x28, 0xe5, 0x37, 0xae, 0xd3, 0xa4, 0xca, 0x40, 0x41, 0xdd, 0x1f, 0x63,
		},
		[]byte{
			0xf4, 0xee, 0xf0, 0x04, 0x16, 0x42, 0x04, 0xad, 0xa5, 0xc8, 0xd6, 0x27, 0x59, 0x6b, 0x79, 0x60,
		},
		[]byte{
			0x4e, 0x47, 0x8b, 0x99, 0x47, 0x81, 0x15, 0x61, 0x97, 0x37, 0xa6, 0x00, 0xd8, 0x62, 0x46, 0x54,
		},
		[]byte{
			0x45, 0xd9, 0x49, 0xf0, 0xe9, 0x62, 0xe8, 0x5b, 0x6f, 0xfe, 0x47, 0x3e, 0xd9, 0x67, 0x27, 0x90,
			0x23, 0x48, 0x7b, 0xb6, 0x52, 0x29, 0xc8, 0x5b, 0x91, 0x45, 0x89, 0x5d, 0xc4, 0x24, 0xf4, 0x75,
		},
	},
	{
		[]byte{
			0x7a, 0xcc, 0x2b, 0x07, 0x28, 0xf3, 0x1d, 0x74, 0xff, 0x7c, 0x10, 0xad, 0x83, 0x28, 0x8b, 0x5e,
		},
		[]byte{
			0x0e, 0x24, 0x45, 0x89, 0x06, 0x53, 0x2a, 0x42, 0x9b, 0x04, 0x57, 0x40, 0x89, 0x47, 0xd6, 0xcd,
		},
		[]byte{
			0x97, 0xa2, 0xe9, 0x6e, 0x9d, 0xee, 0x9f, 0x67, 0xda, 0x78, 0x2c, 0x0c, 0xd0, 0xdd, 0xb0, 0xce,
			0x61, 0x9f, 0xd4, 0x61, 0x5c, 0x56, 0x11, 0x90, 0x4f, 0x03, 0x54, 0xc2, 0x89, 0x08, 0xc8, 0xb3,
		},
		[]byte{
			0xa6, 0x10, 0x30, 0x0c, 0x2b, 0x39, 0x37, 0xfc, 0xb9, 0x70, 0xa7, 0xdf, 0x57, 0x2f, 0x8b, 0xf8,
			0xb4, 0x53, 0x52, 0x26, 0x8b, 0x47, 0x92, 0x25, 0x30, 0xc9, 0x4d, 0x0b, 0xce, 0x8d, 0xfc, 0x45,
			0x00, 0x35, 0x49, 0x26, 0xa9, 0x91, 0x14, 0x27, 0x3a, 0x5c, 0x51, 0x15, 0xf8, 0x2a, 0x49, 0xe8,
		},
	},
	{
		[]byte{
			0xf5, 0xb5, 0xe2, 0x92, 0xdb, 0xd4, 0x36, 0x7b, 0xb6, 0xcc, 0xee, 0xa0, 0x83, 0x87, 0xe0, 0xa1,
		},
		[]byte{
			0x98, 0x5d, 0x7d, 0x6b, 0xda, 0x39, 0xeb, 0x98, 0x39, 0xd4, 0x4b, 0xad, 0x5c, 0x85, 0xbd, 0x41,
		},
		[]byte{
			0x7e, 0xce, 0x60, 0x4e, 0x7b, 0xda, 0x14, 0xf4, 0x31, 0xdd, 0x15, 0xef, 0x8e, 0xed, 0x25, 0x64,
			0x12, 0xda, 0xcc, 0x37, 0xe6, 0x1e, 0x49, 0xbf, 0x35, 0xb8, 0x84, 0x1d, 0xe4, 0x50, 0x9b, 0x93,
			0xc3, 0x7b, 0x3e, 0x88, 0xc9, 0x34, 0xab, 0xa7, 0x45, 0x96, 0xc9, 0xa4, 0x3d, 0x59, 0x4e, 0x3c,
		},
		[]byte{
			0x75, 0xf1, 0x69, 0xae, 0xb6, 0x76, 0xd4, 0xb5, 0xdc, 0xfa, 0x53, 0x3f, 0x55, 0x20, 0xc8, 0x84,
			0xf3, 0x88, 0x2b, 0x85, 0x07, 0x49, 0x27, 0x3f, 0xca, 0x60, 0x23, 0x95, 0x43, 0x9d, 0xdb, 0xd2,
			0x7a, 0x10, 0xb2, 0x8e, 0xa7, 0x3e, 0x70, 0xdb, 0x75, 0x84, 0x4f, 0x97, 0x4e, 0x73, 0xb8, 0x4a,
			0x59, 0x5f, 0xed, 0x51, 0xf5, 0x56, 0xcb, 0x2b, 0xaa, 0xff, 0x41, 0xec, 0x81, 0x58, 0x73, 0x16,
		},
	},
	{
		[]byte{
			0x59, 0x28, 0xfd, 0xac, 0x44, 0xf9, 0xf7, 0xa2, 0xca, 0xff, 0x81, 0xeb, 0xe4, 0xf3, 0x8f, 0x7d,
			0xec, 0x9e, 0xf6, 0x48, 0x01, 0x0f, 0x84, 0x7c,
		},
		[]byte{
			0x0b, 0x69, 0xcd, 0x13, 0xd2, 0xc7, 0x3d, 0xb1, 0x6d, 0x6b, 0x27, 0x05, 0x7f, 0xb4, 0x88, 0x80,
		},
		[]byte{
			0xe1, 0x41, 0x32, 0x27, 0x67, 0x85, 0xb8, 0x48, 0xb4, 0x86, 0x64, 0x8d, 0xcc, 0x20, 0x73, 0x76,
		},
		[]byte{
			0x8b, 0x10, 0x5b, 0xf8, 0xfb, 0x79, 0x7b, 0xb2, 0xba, 0xe1, 0x7c, 0x3a, 0xc2, 0xae, 0x6f, 0x4d,
			0x0b, 0x75, 0xaa, 0x8c, 0xa3, 0x67, 0x70, 0xf0, 0x17, 0x7c, 0x84, 0x24, 0x4f, 0x3c, 0x34, 0xbb,
		},
	},
	{
		[]byte{
			0xb5, 0x3c, 0x54, 0xa6, 0xfb, 0x5c, 0x15, 0xba, 0x33, 0x9f, 0x40, 0xab, 0x0b, 0x7a, 0x11, 0x16,
			0x0b, 0xdf, 0xa0, 0x15, 0x6f, 0x5f, 0xda, 0x50,
		},
		[]byte{
			0x97, 0x4d, 0x4b, 0x31, 0x27, 0xaf, 0x86, 0x51, 0x77, 0x7a, 0x17, 0xcd, 0x04, 0xb6, 0x1f, 0x95,
		},
		[]byte{
			0xaa, 0xd4, 0x06, 0x77, 0x0b, 0xb7, 0xb1, 0x5e, 0x10, 0x09, 0x78, 0xfe, 0x35, 0x3d, 0x01, 0x5c,
			0x8a, 0x2f, 0x9f, 0xee, 0xf3, 0x39, 0xa0, 0x63, 0x94, 0xcf, 0xfd, 0x23, 0xfd, 0x5d, 0xbf, 0x70,
		},
		[]byte{
			0xf3, 0x7c, 0x9b, 0xa3, 0x55, 0x48, 0x29, 0xdb, 0x67, 0xea, 0x89, 0x2d, 0x3d, 0xb4, 0xb8, 0xae,
			0x0c, 0xef, 0xe7, 0x7a, 0x42, 0xc3, 0x3d, 0x15, 0xf7, 0xbd, 0xe4, 0x11, 0xf4, 0xeb, 0xf4, 0x21,
			0x50, 0xc5, 0xad, 0x41, 0x8a, 0x1d, 0xa2, 0x29, 0x4e, 0xcd, 0xea, 0x9a, 0xaf, 0x5e, 0x69, 0xf4,
		},
	},
	{
		[]byte{
			0x96, 0xcd, 0xd2, 0x1a, 0x82, 0x6a, 0x1d, 0x2a, 0x58, 0xfb, 0x9e, 0xad, 0x65, 0x7a, 0x3e, 0xf6,
			0x69, 0x42, 0x2e, 0x22, 0x79, 0x35, 0xe8, 0x63,
		},
		[]byte{
			0x92, 0xbf, 0xa9, 0xfa, 0xc6, 0x09, 0xc2, 0x42, 0x35, 0x83, 0xbf, 0x28, 0xce, 0xe5, 0xa7, 0x71,
		},
		[]byte{
			0xf6, 0xf7, 0xd4, 0x04, 0x35, 0xdc, 0xb6, 0xa9, 0x58, 0x30, 0x50, 0x1c, 0x8f, 0xc3, 0x34, 0xa8,
			0x3d, 0x16, 0xf1, 0xa9, 0xac, 0x8b, 0x32, 0xf3, 0xf6, 0xff, 0x88, 0x29, 0x36, 0xd4, 0x82, 0xf2,
			0x39, 0x11, 0xbb, 0x45, 0xd4, 0x3b, 0x5e, 0x4a, 0x78, 0xee, 0x1b, 0x7a, 0x8a, 0x08, 0x3f, 0xde,
		},
		[]byte{
			0x62, 0x9e, 0x66, 0x09, 0x77, 0xc8, 0x0f, 0x94, 0xcb, 0x0e, 0xc4, 0x28, 0x76, 0xcd, 0x1c, 0x38,
			0x5e, 0x27, 0xb5, 0xee, 0x4c, 0x4b, 0x35, 0x1c, 0x14, 0x3f, 0xce, 0x02, 0x45, 0x19, 0x67, 0x75,
			0xbb, 0xdc, 0x47, 0xc5, 0x96, 0x40, 0x92, 0x4d, 0x32, 0xb0, 0x70, 0xc7, 0x14, 0xbe, 0xf8, 0xe8,
			0x1c, 0x71, 0x00, 0xcb, 0xed, 0xf8, 0x49, 0x03, 0x77, 0x32, 0xfa, 0xc8, 0x45, 0xf9, 0x36, 0x50,
		},
	},
	{
		[]byte{
			0xdf, 0x39, 0x1b, 0xeb, 0x49, 0xfb, 0xd9, 0xdb, 0x07, 0xb7, 0x18, 0xff, 0xa4, 0x31, 0xb0, 0x42,
			0xd2, 0x40, 0x73, 0xb6, 0xd6, 0x1c, 0x6c, 0xa2, 0xf7, 0x29, 0x00, 0xa5, 0x91, 0xb5, 0xe5, 0x8a,
		},
		[]byte{
			0x9b, 0x0a, 0x13, 0x71, 0x15, 0xaa, 0xcc, 0xdf, 0xc3, 0x57, 0xaf, 0xe5, 0x52, 0x88, 0x91, 0x1f,
		},
		[]byte{
			0x15, 0x30, 0x59, 0x89, 0xca, 0xda, 0x8f, 0x7d, 0xee, 0xd1, 0xcc, 0x99, 0x05, 0xa0, 0xb9, 0x26,
		},
		[]byte{
			0x17, 0x0e, 0x7f, 0x64, 0xcc, 0xce, 0x10, 0x66, 0xc5, 0x1f, 0x89, 0x09, 0xf4, 0x3c, 0xc7, 0x1a,
			0xae, 0xdd, 0x60, 0xee, 0x73, 0x08, 0xc3, 0xa8, 0x03, 0x4e, 0x03, 0x8c, 0xa9, 0x46, 0x83, 0x21,
		},
	},
	{
		[]byte{
			0xd2, 0xf7, 0x02, 0x02, 0xe0, 0xea, 0x5b, 0x93, 0xc1, 0xe2, 0x36, 0xce, 0x40, 0xfa, 0x1e, 0x6b,
			0xaa, 0x86, 0x5f, 0xef, 0x80, 0xf3, 0x2c, 0xde, 0x84, 0x7b, 0xcb, 0xc4, 0xc5, 0x22, 0x83, 0xde,
		},
		[]byte{
			0xf3, 0x74, 0x64, 0x44, 0x76, 0x3a, 0x31, 0xd8, 0x56, 0x8f, 0xa5, 0x15, 0x14, 0xac, 0x48, 0x4c,
		},
		[]byte{
			0x7f, 0xdb, 0xb2, 0x52, 0xed, 0x6e, 0xd1, 0x8f, 0xe7, 0x16, 0x3f, 0x71, 0x2e, 0x7c, 0x37, 0x7d,
			0x82, 0x02, 0x7f, 0x21, 0xe7, 0xca, 0xc5, 0x8b, 0x95, 0xe2, 0x28, 0x51, 0x73, 0x9b, 0xb9, 0x01,
		},
		[]byte{
			0xe2, 0x09, 0x83, 0xbc, 0x24, 0x92, 0x0d, 0x96, 0x35, 0x33, 0x34, 0xa4, 0x11, 0x60, 0xe7, 0x3f,
			0x4e, 0xd5, 0xe6, 0xcc, 0xb0, 0xf6, 0x10, 0x1b, 0xf0, 0x48, 0x78, 0xfd, 0xba, 0x47, 0xfa, 0x5a,
			0x1c, 0x34, 0x79, 0x6b, 0x1f, 0x6f, 0xbf, 0xd8, 0x0e, 0x48, 0x59, 0xf4, 0x11, 0x83, 0x11, 0xab,
		},
	},
	{
		[]byte{
			0xc2, 0xa8, 0x99, 0x66, 0x59, 0xae, 0x7c, 0x36, 0xc7, 0x44, 0xe7, 0x6e, 0x2a, 0x88, 0xab, 0x0c,
			0x26, 0xff, 0x13, 0x26, 0x1c, 0x24, 0x40, 0x63, 0x70, 0xbb, 0x96, 0x4e, 0x7c, 0x13, 0xc2, 0x6d,
		},
		[]byte{
			0xeb, 0x9e, 0x66, 0xf4, 0xbc, 0xa5, 0x35, 0x39, 0xa3, 0xf2, 0xb4, 0xb2, 0x96, 0x5e, 0x34, 0x0e,
		},
		[]byte{
			0xfc, 0x0f, 0x16, 0xf1, 0x9b, 0xf6, 0x0f, 0xc8, 0x70, 0x58, 0xad, 0x49, 0x4f, 0xe9, 0xdd, 0x49,
			0x06, 0x2c, 0x45, 0xdf, 0x1b, 0x0e, 0x2c, 0x29, 0x88, 0x52, 0xe1, 0xb9, 0xc4, 0x57, 0x2f, 0x92,
			0x4e, 0xde, 0x61, 0x37, 0xcf, 0xc6, 0x6e, 0x6e, 0x17, 0x72, 0x8b, 0xe3, 0x78, 0x13, 0x44, 0x6e,
		},
		[]byte{
			0x20, 0x0e, 0x62, 0xa7, 0x00, 0xec, 0x16, 0xee, 0x66, 0x93, 0xa6, 0x8e, 0x0a, 0xd5, 0x6b, 0x42,
			0xdd, 0x8e, 0x7b, 0xfa, 0x67, 0x2f, 0xbb, 0x77, 0x0d, 0xeb, 0x88, 0xa8, 0x5f, 0xf1, 0x2f, 0xe6,
			0xe1, 0x52, 0x07, 0x3d, 0x6d, 0x1a, 0xab, 0x8c, 0x7a, 0x21, 0xfe, 0xa6, 0xba, 0xbf, 0x29, 0x29,
			0xa7, 0x73, 0xb2, 0x8e, 0xae, 0xb4, 0xf0, 0xb4, 0xa2, 0xe5, 0xd7, 0x05, 0xb9, 0x76, 0xbc, 0x08,
		},
	},
}

func TestModeECB_Encipher(t *testing.T) {
	for i, tt := range modeECBTests {
		t.Run("case "+strconv.Itoa(i), func(t *testing.T) {
			out := ECB(tt.key).Encipher(tt.in)
			if !bytes.Equal(out, tt.out) {
				t.Errorf("key: %x in: %x out: %x want: %x", tt.key, tt.in, out, tt.out)
			}
		})
	}
}

func TestModeECB_Decipher(t *testing.T) {
	for i, tt := range modeECBTests {
		t.Run("case "+strconv.Itoa(i), func(t *testing.T) {
			out := ECB(tt.key).Decipher(tt.out)
			if !bytes.Equal(out, tt.in) {
				t.Errorf("key: %x in: %x out: %x want: %x", tt.key, tt.out, out, tt.in)
			}
		})
	}
}

func TestModeCBC_Encipher(t *testing.T) {
	for i, tt := range modeCBCTests {
		t.Run("case "+strconv.Itoa(i), func(t *testing.T) {
			out := CBC(tt.key, tt.iv).Encipher(tt.in)
			if !bytes.Equal(out, tt.out) {
				t.Errorf("key: %x iv: %x in: %x out: %x want: %x", tt.key, tt.iv, tt.in, out, tt.out)
			}
		})
	}
}

func TestModeCBC_Decipher(t *testing.T) {
	for i, tt := range modeCBCTests {
		t.Run("case "+strconv.Itoa(i), func(t *testing.T) {
			out := CBC(tt.key, tt.iv).Decipher(tt.out)
			if !bytes.Equal(out, tt.in) {
				t.Errorf("key: %x iv: %x in: %x out: %x want: %x", tt.key, tt.iv, tt.out, out, tt.in)
			}
		})
	}
}
